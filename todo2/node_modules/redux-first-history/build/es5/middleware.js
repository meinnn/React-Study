"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRouterMiddleware = void 0;
var actions_1 = require("./actions");
function appendBasename(location, basename) {
    if (typeof location === 'string' && !location.startsWith(basename)) {
        return basename + location;
    }
    if (typeof location === 'object' &&
        !!location.pathname &&
        !location.pathname.startsWith(basename)) {
        return __assign(__assign({}, location), { pathname: basename + location.pathname });
    }
    return location;
}
var createRouterMiddleware = function (_a) {
    var history = _a.history, showHistoryAction = _a.showHistoryAction, basename = _a.basename;
    return function () {
        return function (next) {
            return function (action) {
                if (action.type !== actions_1.CALL_HISTORY_METHOD) {
                    return next(action);
                }
                var method = action.payload.method;
                // @ts-ignore
                var args = action.payload.args;
                // eslint-disable-next-line default-case
                switch (method) {
                    case 'push': {
                        var callArgs = args;
                        if (basename && args.length > 0) {
                            callArgs = __spreadArray([
                                appendBasename(args[0], basename)
                            ], args.slice(1), true);
                        }
                        history.push.apply(history, callArgs);
                        break;
                    }
                    case 'replace': {
                        var callArgs = args;
                        if (basename && args.length > 0) {
                            callArgs = __spreadArray([
                                appendBasename(args[0], basename)
                            ], args.slice(1), true);
                        }
                        history.replace.apply(history, callArgs);
                        break;
                    }
                    case 'go':
                        history.go.apply(history, args);
                        break;
                    case 'back':
                    case 'goBack':
                        // @ts-ignore
                        history.goBack && history.goBack.apply(history, args);
                        //@ts-ignore //support history 5.x
                        history.back && history.back.apply(history, args);
                        break;
                    case 'forward':
                    case 'goForward':
                        // @ts-ignore
                        history.goForward && history.goForward.apply(history, args);
                        //@ts-ignore //support history 5.x
                        history.forward && history.forward.apply(history, args);
                        break;
                }
                if (showHistoryAction)
                    return next(action);
            };
        };
    };
};
exports.createRouterMiddleware = createRouterMiddleware;
//# sourceMappingURL=middleware.js.map