import type { Location, Action, History } from 'history';
export declare const CALL_HISTORY_METHOD = "@@router/CALL_HISTORY_METHOD";
export declare const LOCATION_CHANGE = "@@router/LOCATION_CHANGE";
export declare type HistoryMethods = 'push' | 'replace' | 'go' | 'goBack' | 'goForward' | 'back' | 'forward';
export declare const locationChangeAction: (location: Location, action: Action) => {
    type: "@@router/LOCATION_CHANGE";
    payload: {
        location: Location;
        action: Action;
    };
};
export interface LocationActionPayload<A = unknown[]> {
    method: string;
    args?: A;
}
export interface CallHistoryMethodAction<A = unknown[]> {
    type: typeof CALL_HISTORY_METHOD;
    payload: LocationActionPayload<A>;
}
export declare const push: (...args: Parameters<History['push']>) => CallHistoryMethodAction<Parameters<History['push']>>;
export declare const replace: (...args: Parameters<History['replace']>) => CallHistoryMethodAction<Parameters<History['replace']>>;
export declare const go: (...args: Parameters<History['go']>) => CallHistoryMethodAction<Parameters<History['go']>>;
export declare const goBack: () => CallHistoryMethodAction<Parameters<History['goBack']>>;
export declare const goForward: () => CallHistoryMethodAction<Parameters<History['goForward']>>;
export declare const back: () => CallHistoryMethodAction<Parameters<History['back']>>;
export declare const forward: () => CallHistoryMethodAction<Parameters<History['forward']>>;
export declare type RouterActions = ReturnType<typeof push> | ReturnType<typeof replace> | ReturnType<typeof go> | ReturnType<typeof goBack> | ReturnType<typeof goForward> | ReturnType<typeof locationChangeAction> | ReturnType<typeof back> | ReturnType<typeof forward>;
